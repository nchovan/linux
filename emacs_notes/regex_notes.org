* Basic:
  ex: cat sample | grep ^a searches for a at the start of a string
  .	replaces any character
  ^	matches start of string ex: ^abc
  $	matches end of string ex: abc$
  *	matches up zero or more times the preceding character abc*
  \	Represent special characters
  ()	Groups regular expressions
  ?	Matches up exactly one character ex: colou?r matches colour or color
* Anchors ^ and $
  match any string starting with abc: ^abc
  matches any string ending with abc: abc$
  matches any string starting with abc and ending with def abc^ abc def$	
  matches any string that has 'abc' in it: 'abc'
* Quantifiers *, +, ? and {}
  matches a sting with ab follwed by zero or more c: abc*
  matches a satring with ab folled by one or more c: abc +
  matches a string with ab followed by zero or one c: abc?
  matches a string with ab follwed by two c: abc{2}
  matches a string with ab folled by 2 or more c; abc{2, }
  matches a string with ab follwed by 2 up to 5 c: abc{2,5}
  matches a string with a follwed by zero or more copies of the sequence bc: a(bc)
  matches a string with a folled by 2 up 5 copies of the sequence bc: a(bc){2,5}
* OR Operator:
  matches a string with a follwed by b or c, also captures b or c:a(b|c)
  same as before but wont capture b or ca[b|c]
* Character classes:
  matches a string with $ before one digit: /$/d 
  matches a single character that is a digit: /d
  matches a word charater(alphanumeric character plus underscore): /w
  matches a whitespace charactrer: /s
  matches any charracter: .
  /d /w /s also present the negations with /D /W /S
  matches any single character that is not a digit: /D
  matches a nonword charater (space): /W
  matches any non whitespace character: /S
* Flags:
  g (global) does not return after the first match, restarting the subsequent searches from the end of the previous match
  m (multi-line) when enabled ^ and $ will match the start and end of a line, instead of the whole string
  i (insensitive) makes the whole expression case-insensitive (for instance /aBc/i would match AbC)
* Grouping and capturing ()
  a(bc)	 parentheses create a capturing group with value bc, will show abc
  a(?:bc)*	using ? we disable the capture group, will show a or abc
  a(?<foo>bc)	If we choose to put a name to the groups using ?<foo> we will be able to retrieve the group values using the match result like a dictionary where the keys will be the name of each group.
* Bracket expressions []
  matches a string that has either an a, b or c. same as a|b|c: [abc]
  same as above but: [a-c]
  single hexadecimal digit, case insensitively: [a-fA-F0-9]
  string that has a character from 0 to 9 before a % sign: [0-9]%
  string that has not a letter from a to z or from A to Z. In this case the ^ is used as negation of the expression: [^a-zA-Z]
* Boundaries /b and /B
  \babc\b   performs a "whole words only" search for abc
  \Babc\B   matches only if abc is surrounded by work characters labcd would highlight the abc in labcd
**  test a boundarie with a quantifier:
    \b[1-9][0-9]{3}\b to match a number between 1000 and 9999. the \b..\b sets the boundarie, [1-9] sets frist number to be 1-9, [0-9]{3} says there should be three following numbers after the first that are 0-9 giving us the results of a number between 1000 and 9999
**  \b[1-9][0-9]{2,4}\b matches a number between 100 and 99999. this boundarie uses two qauntifiers to set the first two numbers at 1-9 follwed by 4 numbers that are 0-9 giving us a number between 100 and 99999






















